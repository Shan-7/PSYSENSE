#include <Wire.h>
#include "MAX30105.h"
#include "heartRate.h"
#include "spo2_algorithm.h"
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP085.h>
#include <HMC5883L.h> // For GY-273 Magnetic Sensor

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET -1

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
Adafruit_MPU6050 mpu;
Adafruit_BMP085 bmp;
HMC5883L mag;

const int tempPin = A0; // LM35 temperature sensor
const int fsrPin1 = A1; // FSR sensor 1
const int fsrPin2 = A2; // FSR sensor 2
const int emgPin = A3; // EMG sensor
const int ledPin = 13;
const int ledPin1 = 12;
unsigned long startTime;
MAX30105 particleSensor;

const byte RATE_SIZE = 4;
byte rates[RATE_SIZE];
byte rateSpot = 0;
long lastBeat = 0;

float beatsPerMinute;
int beatAvg;

void setup()
{
  startTime = millis();
  pinMode(ledPin, OUTPUT);
  pinMode(ledPin1, OUTPUT);
  Serial.begin(115200);
  Serial.println("Initializing...");

  if (!particleSensor.begin(Wire, I2C_SPEED_FAST))
  {
    Serial.println("MAX30102 was not found. Please check wiring/power.");
    while (1);
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");
  particleSensor.setup();
  particleSensor.setPulseAmplitudeRed(0x0A);
  particleSensor.setPulseAmplitudeGreen(0);

  if (!mpu.begin()) {
    Serial.println("MPU6050 not found. Please check wiring/power.");
    while (1);
  }

  if (!bmp.begin()) {
    Serial.println("BMP180 not found. Please check wiring/power.");
    while (1);
  }

  if (!mag.begin()) {
    Serial.println("GY-273 Magnetic sensor not found. Please check wiring/power.");
    while (1);
  }

  // Initialize the OLED display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  display.display();
  delay(2000); // Pause for 2 seconds
  display.clearDisplay();
}

void loop()
{
  digitalWrite(ledPin, LOW);

  long irValue = particleSensor.getIR();

  if (checkForBeat(irValue) == true)
  {
    long delta = millis() - lastBeat;
    lastBeat = millis();
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute;
      rateSpot %= RATE_SIZE;
      beatAvg = 0;
      for (byte x = 0; x < RATE_SIZE; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
    }
  }

  float lm35Temp = analogRead(tempPin) * (5.0 / 1024.0) * 100;
  int fsrValue1 = analogRead(fsrPin1);
  int fsrValue2 = analogRead(fsrPin2);
  int emgValue = analogRead(emgPin);

  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  float pressure = bmp.readPressure();
  float altitude = bmp.readAltitude();

  Vector magValue = mag.readNormalize();

  // Calculate SpO2 using the spo2_algorithm library
  int32_t spo2 = 0;
  int8_t validSPO2 = 0;
  int32_t hr = 0;
  int8_t validHR = 0;

  maxim_heart_rate_and_oxygen_saturation((uint32_t *)irValue, 1, (uint32_t *)&irValue, &spo2, &validSPO2, &hr, &validHR);

  // Display sensor values on the serial monitor in CSV format
  Serial.print(irValue);
  Serial.print(",");
  Serial.print(beatsPerMinute);
  Serial.print(",");
  Serial.print(beatAvg);
  Serial.print(",");
  Serial.print(lm35Temp);
  Serial.print(",");
  Serial.print(fsrValue1);
  Serial.print(",");
  Serial.print(fsrValue2);
  Serial.print(",");
  Serial.print(emgValue);
  Serial.print(",");
  Serial.print(pressure);
  Serial.print(",");
  Serial.print(altitude);
  Serial.print(",");
  Serial.print(magValue.XAxis);
  Serial.print(",");
  Serial.print(magValue.YAxis);
  Serial.print(",");
  Serial.print(magValue.ZAxis);
  Serial.print(",");
  Serial.print(a.acceleration.x);
  Serial.print(",");
  Serial.print(a.acceleration.y);
  Serial.print(",");
  Serial.print(a.acceleration.z);
  Serial.print(",");
  Serial.print(g.gyro.x);
  Serial.print(",");
  Serial.print(g.gyro.y);
  Serial.print(",");
  Serial.print(g.gyro.z);
  Serial.print(",");
  Serial.print(spo2);
  Serial.println();

  // Update and display the timer on the OLED screen
  unsigned long currentTime = millis();
  unsigned long elapsedTime = currentTime - startTime;
  unsigned long remainingTime = 60000 - elapsedTime;
  int seconds = remainingTime / 1000;

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.print("Psy-Sense Time= ");
  display.print(seconds);
  display.print("s");

  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 10);
  display.print("Temp: ");
  display.print(lm35Temp);
  display.print("C");

  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 20);
  display.print("BPM: ");
  display.print(beatsPerMinute);

  display.display();

  if (millis() - startTime >= 60000)
  {
    digitalWrite(ledPin1, HIGH);
  }
  else
  {
    digitalWrite(ledPin1, LOW);
  }
}
